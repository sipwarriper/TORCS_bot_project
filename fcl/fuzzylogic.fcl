FUNCTION_BLOCK gear	// Block definition (there may be more than one block per file)

VAR_INPUT				// Define input variables
	rpm : REAL;
	accelerate: REAL;
END_VAR

VAR_OUTPUT				// Define output variable
	outgear: REAL;       //-1 shift down, 0 no shift, 1 shift up
END_VAR

FUZZIFY rpm			// Fuzzify input variable 'rpm': {'low', 'medium' , 'high'}
	TERM low := (0, 1) (4000,1) (5000, 0);
	TERM medium:= (4000, 0) (5000, 1) (7500, 1) (8500, 0);
	TERM high:= (7500, 0) (8500, 1) (10000, 1);
END_FUZZIFY

FUZZIFY accelerate			// Fuzzify input variable 'accelerate': { 'no', 'yes' }
	TERM no := (0, 1) (0.0001, 0);
	TERM yes := (0, 0) (0.0001, 1) (1, 1);
END_FUZZIFY

DEFUZZIFY outgear			// Defzzzify output variable 'outgear' : {'shiftdown', 'keep', 'shiftup' }
	TERM shiftdown := -1;
	TERM keep := 0;
	TERM shiftup := 1;
	METHOD : COGS;		// Use 'Center Of Gravity' defuzzification method
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY

RULEBLOCK No1
	AND : MIN;			// Use 'min' for 'and' (also implicit use 'max' for 'or' to fulfill DeMorgan's Law)
	ACT : MIN;			// Use 'min' activation method
	ACCU : MAX;			// Use 'max' accumulation method

	RULE 1 : IF accelerate IS yes AND rpm IS high THEN outgear IS shiftup;
	RULE 2 : IF accelerate IS yes AND rpm IS low THEN outgear IS keep;
	RULE 3 : IF rpm IS medium THEN outgear IS keep;
	RULE 4 : IF accelerate IS no AND rpm IS low THEN outgear IS shiftdown;
	RULE 5 : IF accelerate IS no AND rpm IS high THEN outgear IS keep;

END_RULEBLOCK

END_FUNCTION_BLOCK


//--------------------------SEPARADOR---------------------------------------------------------------\\

FUNCTION_BLOCK acceleration	// Block definition (there may be more than one block per file)

VAR_INPUT				// Define input variables
	distNextTurn : REAL;
	angle : REAL;
	speed : REAL;
	currentTurn : REAL;
END_VAR

VAR_OUTPUT				// Define output variable
	accel: REAL;       //-1 max brake, 0 nothing, 1 max accel
END_VAR

FUZZIFY distNextTurn // Fuzzify input variable 'distNextTurn': {far, near, close}
	TERM far := (150,0) (200,1);
	TERM near:= (50,0) (75,1) (150,1) (200,0);
	TERM close:= (0,1) (50,1) (75,0);
END_FUZZIFY

FUZZIFY angle			// Fuzzify input variable 'angle': { 'open' , 'medium' , 'closed' }
	TERM open := (0,1) (0.15, 1) (0.25, 1) (0.5, 0);
	TERM medium := (0.25, 0) (0.5, 1) (0.75, 1) (0.85,0);
	TERM closed := (0.75, 0) (0.85, 1) (1.25, 1);
END_FUZZIFY

FUZZIFY currentTurn			// Fuzzify input variable 'angle': { 'straight' , 'open' , 'medium' , 'closed' }  //de 0 a 1.25
    TERM straight := (0, 1) (0.05, 0);
	TERM open := (0, 0) (0.15, 1) (0.25, 1) (0.5, 0);
	TERM medium := (0.25, 0) (0.5, 1) (0.75, 1) (0.85,0);
	TERM closed := (0.75, 0) (0.85, 1) (1.25, 1);
END_FUZZIFY

FUZZIFY speed			// Fuzzify input variable 'speed': { 'stopped' , 'slow' , 'average' , 'fast' }
	TERM stopped := (0, 1) (20, 0);
	TERM slow := (0, 0) (20, 1) (80, 1) (120, 0);
	TERM average := (80, 0) (120, 1) (200, 1) (250, 0);
	TERM fast := (200, 0) (250, 1);
END_FUZZIFY

DEFUZZIFY accel			// Defzzzify output variable 'accel' : {'hardBrake', 'softBrake', 'nothing', 'softAccel', 'hardAccel' }
	TERM hardBrake := (-1, 1) (-0.6, 1) (-0.4, 0);
	TERM softBrake := (-0.6, 0) (-0.4, 1) (-0.1,1) (0,0);
	TERM nothing := (-0.1, 0) (0,1) (0.1, 0);
	TERM softAccel := (0, 0) (0.1,1) (0.4, 1) (0.6, 0);
	TERM hardAccel := (0.4, 0) (0.6, 1) (1,1);
	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY

RULEBLOCK No1
	AND : MIN;			// Use 'min' for 'and' (also implicit use 'max' for 'or' to fulfill DeMorgan's Law)
	ACT : MIN;			// Use 'min' activation method
	ACCU : MAX;			// Use 'max' accumulation method

    RULE 1 : IF speed IS stopped THEN accel IS hardAccel;
	RULE 2 : IF speed IS slow AND currentTurn IS closed THEN accel IS nothing; //si la curva que ve Ã©s tancada mantenim lent
	RULE 3 : IF speed IS slow AND currentTurn IS NOT closed THEN accel IS hardAccel;
	RULE 4 : IF speed IS average AND currentTurn IS closed THEN accel IS softBrake;
	RULE 5 : IF speed IS average AND currentTurn IS medium THEN accel IS softAccel;
	RULE 6 : IF speed IS average AND currentTurn IS open THEN accel IS hardAccel;

/*

	RULE 1 : IF speed IS stopped THEN accel IS hardAccel;
	RULE 2 : IF speed IS slow AND currentTurn IS closed THEN accel IS nothing;
    RULE 3 : IF speed IS slow AND currentTurn IS medium AND distNextTurn IS NOT close THEN accel IS hardAccel;
	RULE 4 : IF speed IS slow AND currentTurn IS NOT closed AND distNextTurn IS close AND angle IS NOT closed THEN accel IS hardAccel; //revisar angle is medium
	RULE 5 : IF speed IS slow AND currentTurn IS NOT closed AND distNextTurn IS close AND angle IS closed THEN accel IS softAccel; //canviar en funcio de comportament
	RULE 6 : IF speed IS average AND currentTurn IS closed THEN accel IS softBrake;
	RULE 7 : IF speed IS average AND currentTurn IS medium THEN accel IS nothing; //comprovar si es pot ficar softAccel
	RULE 8 : IF speed IS average AND currentTurn IS open AND distNextTurn IS NOT close THEN accel IS hardAccel;
	RULE 9 : IF speed IS average AND currentTurn IS open AND distNextTurn IS close AND angle IS NOT closed THEN accel IS hardAccel;
	RULE 10 : IF speed IS average AND currentTurn IS open AND distNextTurn IS close AND angle IS closed THEN accel IS softAccel;
	RULE 11 : IF speed IS fast AND currentTurn IS NOT straight AND distNextTurn IS far THEN accel IS softAccel;
	RULE 12 : IF speed IS fast AND currentTurn IS straight AND distNextTurn IS NOT close THEN accel IS hardAccel;
	RULE 13 : IF speed IS fast AND distNextTurn IS NOT close AND angle IS closed THEN accel IS hardBrake;

	*/



END_RULEBLOCK

END_FUNCTION_BLOCK
