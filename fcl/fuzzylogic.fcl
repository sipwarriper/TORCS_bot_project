 /*
	Example: A tip calculation FIS (fuzzy inference system)
	Calculates tip based on 'servie' and 'food'

	If you want to about this example (and fuzzy logic), please 
	read Matlab's tutorial on fuzzy logic toolbox 
	http://www.mathworks.com/access/helpdesk/help/pdf_doc/fuzzy/fuzzy.pdf

									Pablo Cingolani 
									pcingola@users.sourceforge.net
*/

FUNCTION_BLOCK gear	// Block definition (there may be more than one block per file)

VAR_INPUT				// Define input variables
	rpm : REAL;
	accelerate: REAL;
END_VAR

VAR_OUTPUT				// Define output variable
	outgear: REAL;       //-1 shift down, 0 no shift, 1 shift up
END_VAR

FUZZIFY rpm			// Fuzzify input variable 'rpm': {'low', 'medium' , 'high'}
	TERM low := (0, 1) (4000,1) (5000, 0);
	TERM medium:= (4000, 0) (5000, 1) (7500, 1) (8500, 0);
	TERM high:= (7500, 0) (8500, 1) (10000, 1);
END_FUZZIFY

FUZZIFY accelerate			// Fuzzify input variable 'accelerate': { 'no', 'yes' }
	TERM no := (0, 1) (0.0001, 0);
	TERM yes := (0, 0) (0.0001, 1) (1, 1);
END_FUZZIFY

DEFUZZIFY outgear			// Defzzzify output variable 'outgear' : {'shiftdown', 'keep', 'shiftup' }
	TERM shiftdown := -1;
	TERM keep := 0;
	TERM shiftup := 1;
	METHOD : COGS;		// Use 'Center Of Gravity' defuzzification method
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY

RULEBLOCK No1
	AND : MIN;			// Use 'min' for 'and' (also implicit use 'max' for 'or' to fulfill DeMorgan's Law)
	ACT : MIN;			// Use 'min' activation method
	ACCU : MAX;			// Use 'max' accumulation method

	RULE 1 : IF accelerate IS yes AND rpm IS high THEN outgear IS shiftup;
	RULE 2 : IF accelerate IS yes AND rpm IS low THEN outgear IS keep;
	RULE 3 : IF rpm IS medium THEN outgear IS keep;
	RULE 4 : IF accelerate IS no AND rpm IS low THEN outgear IS shiftdown;
	RULE 5 : IF accelerate IS no AND rpm IS high THEN outgear IS keep;

END_RULEBLOCK

END_FUNCTION_BLOCK


//--------------------------SEPARADOR---------------------------------------------------------------\\

FUNCTION_BLOCK acceleration	// Block definition (there may be more than one block per file)

VAR_INPUT				// Define input variables
	rpm : REAL;
	accelerate: REAL;
END_VAR

VAR_OUTPUT				// Define output variable
	outgear: REAL;       //-1 shift down, 0 no shift, 1 shift up
END_VAR

FUZZIFY rpm			// Fuzzify input variable 'rpm': {'low', 'medium' , 'high'}
	TERM low := (0, 1) (4000,1) (5000, 0);
	TERM medium:= (4000, 0) (5000, 1) (7500, 1) (8500, 0);
	TERM high:= (7500, 0) (8500, 1) (10000, 1);
END_FUZZIFY

FUZZIFY accelerate			// Fuzzify input variable 'accelerate': { 'no', 'yes' }
	TERM no := (0, 1) (0.0001, 0);
	TERM yes := (0, 0) (0.0001, 1) (1, 1);
END_FUZZIFY

DEFUZZIFY outgear			// Defzzzify output variable 'outgear' : {'shiftdown', 'keep', 'shiftup' }
	TERM shiftdown := -1;
	TERM keep := 0;
	TERM shiftup := 1;
	METHOD : COGS;		// Use 'Center Of Gravity' defuzzification method
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY

RULEBLOCK No1
	AND : MIN;			// Use 'min' for 'and' (also implicit use 'max' for 'or' to fulfill DeMorgan's Law)
	ACT : MIN;			// Use 'min' activation method
	ACCU : MAX;			// Use 'max' accumulation method

	RULE 1 : IF accelerate IS yes AND rpm IS high THEN outgear IS shiftup;
	RULE 2 : IF accelerate IS yes AND rpm IS low THEN outgear IS keep;
	RULE 3 : IF rpm IS medium THEN outgear IS keep;
	RULE 4 : IF accelerate IS no AND rpm IS low THEN outgear IS shiftdown;
	RULE 5 : IF accelerate IS no AND rpm IS high THEN outgear IS keep;

END_RULEBLOCK

END_FUNCTION_BLOCK

